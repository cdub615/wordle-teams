drop table daily_scores;
drop table players;
drop table teams;


CREATE TABLE "public"."daily_scores" (
    id bigint generated by default as identity not null,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "player_id" "uuid" NOT NULL,
    "date" timestamp with time zone NOT NULL,
    "answer" "text",
    "guesses" "text"[] DEFAULT '{}'::"text"[] NOT NULL,
    constraint daily_scores_pkey primary key (id)
);

ALTER TABLE "public"."daily_scores" OWNER TO "postgres";

CREATE TABLE "public"."players" (
    "id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "first_name" "text",
    "last_name" "text",
    "email" "text" NOT NULL
);

ALTER TABLE "public"."players" OWNER TO "postgres";

ALTER TABLE ONLY "public"."players"
    ADD CONSTRAINT "players_pkey" PRIMARY KEY ("id");

CREATE UNIQUE INDEX "player_pkey" ON "public"."players" USING "btree" ("id");
CREATE UNIQUE INDEX "players_email_key" ON "public"."players" USING "btree" ("email");

CREATE TABLE "public"."teams" (
    id bigint generated by default as identity not null,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "creator" "uuid",
    "name" "text" NOT NULL,
    "play_weekends" boolean DEFAULT false NOT NULL,
    "player_ids" "uuid"[] DEFAULT '{}'::"uuid"[] NOT NULL,
    "n_a" smallint DEFAULT '0'::smallint NOT NULL,
    "one_guess" smallint DEFAULT '5'::smallint NOT NULL,
    "two_guesses" smallint DEFAULT '3'::smallint NOT NULL,
    "three_guesses" smallint DEFAULT '2'::smallint NOT NULL,
    "four_guesses" smallint DEFAULT '1'::smallint NOT NULL,
    "five_guesses" smallint DEFAULT '0'::smallint NOT NULL,
    "six_guesses" smallint DEFAULT '-1'::smallint NOT NULL,
    "failed" smallint DEFAULT '-3'::smallint NOT NULL,
    "invited" "text"[] DEFAULT '{}'::"text"[] NOT NULL,
    constraint teams_pkey primary key (id)
);

ALTER TABLE "public"."teams" OWNER TO "postgres";

ALTER TABLE ONLY "public"."daily_scores"
    ADD CONSTRAINT "daily_scores_player_id_fkey" FOREIGN KEY ("player_id") REFERENCES "public"."players"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."players"
    ADD CONSTRAINT "players_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."teams"
    ADD CONSTRAINT "teams_creator_fkey" FOREIGN KEY ("creator") REFERENCES "auth"."users"("id");

CREATE POLICY "Enable delete for team creators" ON "public"."teams" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "creator"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."daily_scores" FOR DELETE TO "authenticated" USING (("auth"."uid"() = "player_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."players" FOR DELETE USING (("auth"."uid"() = "id"));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."daily_scores" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."players" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."teams" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable read access for authenticated users" ON "public"."daily_scores" FOR SELECT USING (true);

CREATE POLICY "Enable read access for authenticated users" ON "public"."players" FOR SELECT USING (true);

CREATE POLICY "Enable update for team creators" ON "public"."teams" FOR UPDATE TO "authenticated" USING ((("auth"."uid"() = "creator") OR ("auth"."uid"() = ANY ("player_ids")))) WITH CHECK ((("auth"."uid"() = "creator") OR ("auth"."uid"() = ANY ("player_ids"))));

CREATE POLICY "Enable users to read teams" ON "public"."teams" FOR SELECT USING (true);

CREATE POLICY "Enable users to update their own player" ON "public"."players" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));

CREATE POLICY "Enable users to update their own scores" ON "public"."daily_scores" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "player_id")) WITH CHECK (("auth"."uid"() = "player_id"));

ALTER TABLE "public"."daily_scores" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."players" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."teams" ENABLE ROW LEVEL SECURITY;